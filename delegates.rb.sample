##
# Sample Ruby delegate script containing stubs and documentation for all
# available delegate methods. See the "Delegate Script" section of the user
# manual for more information.
#
# The application will create an instance of this class early in the request
# cycle, disposed of it at the end of the request cycle. Instances don't need
# to be thread-safe, but sharing information across instances **does** need
# to be thread-safe.
#
# This version of the script is for Cantaloupe version 4. Earlier versions
# aren't compatible.
#
class CustomDelegate

  ##
  # Attribute for the request context, which is a hash containing information
  # about the current request.
  #
  # This attribute will be set by the server before any other methods are
  # called. Methods can then access its keys like:
  #
  # context['identifier'] # returns the image identifier
  #
  # The hash will contain the following keys in response to **all** requests:
  #
  # * 'client_ip'       [String] Client IP address.
  # * 'cookies'         [Hash<String,String>] Hash of cookie name-value pairs.
  # * 'identifier'      [String] Image identifier.
  # * 'request_headers' [Hash<String,String>] Hash of header name-value pairs.
  # * 'request_uri'     [String] Public request URI.
  #
  # The hash will contain the following additional string keys in response to
  # image requests:
  #
  # * 'full_size'      [Hash<String,Integer>] Hash with 'width' and 'height'
  #                    keys corresponding to the pixel dimensions of the
  #                    source image.
  # * 'operations'     [Array<Hash<String,Object>>] Array of operations in
  #                    order of application. Only operations that are not
  #                    no-ops will be included. Every hash contains a 'class'
  #                    key corresponding to the operation class name, which
  #                    will be one of the e.i.l.c.operation.Operation
  #                    implementations.
  # * 'output_format'  [String] Format media (MIME) type.
  # * 'resulting_size' [Hash<String,Integer>] Hash with 'width' and 'height'
  #                    keys corresponding to the pixel dimensions of the
  #                    resulting image after all operations have been applied.
  #
  attr_accessor :context

  ##
  # Tells the server whether to redirect in response to the request. Will be
  # called upon all image requests.
  #
  # @return [Hash<String,Object>,nil] Hash with 'location' and 'status_code'
  #         keys. 'location' must be a URI string; 'status_code' must be an
  #         integer from 300 to 399. Return nil for no redirect.
  #
  def redirect
  end

  ##
  # Tells the server whether the given request is authorized. Will be called
  # upon all image requests to any endpoint.
  #
  # Implementations should assume that the underlying resource is available,
  # and not try to check for it.
  #
  # @return [Boolean] Whether the request is authorized.
  #
  def authorized?
    true
  end

  ##
  # Used to add additional keys to an information JSON response. See the
  # [Image API specification](http://iiif.io/api/image/2.1/#image-information).
  #
  # @return [Hash] Hash that will be merged into an IIIF Image API 2.x
  #                information response. Return an empty hash to add nothing.
  #
  def extra_iiif2_information_response_keys
=begin
    Example:
    {
        'attribution' =>  'Copyright My Great Organization. All rights '\
                          'reserved.',
        'license' =>  'http://example.org/license.html',
        'logo' =>  'http://example.org/logo.png',
        'service' => {
            '@context' => 'http://iiif.io/api/annex/services/physdim/1/context.json',
            'profile' => 'http://iiif.io/api/annex/services/physdim',
            'physicalScale' => 0.0025,
            'physicalUnits' => 'in'
        }
    }
=end
    {}
  end

  ##
  # Tells the server which resolver to use for the given identifier.
  #
  # @return [String] Resolver name
  #
  def resolver
  end

  ##
  # @return [String,nil] Blob key of the image corresponding to the given
  #                      identifier, or nil if not found.
  #
  def azurestorageresolver_blob_key
  end

  ##
  # @return [String,nil] Absolute pathname of the image corresponding to the
  #                      given identifier, or nil if not found.
  #
  def filesystemresolver_pathname
  end

  ##
  # @return [String,Hash<String,String>,nil] String URI; Hash with 'uri' key,
  #         and optionally 'username' and 'secret' keys; or nil if not found.
  #
  def httpresolver_resource_info
  end

  ##
  # @return [String] Identifier of the image corresponding to the given
  #                  identifier in the database.
  #
  def jdbcresolver_database_identifier
  end

  ##
  # Returns either the media (MIME) type of an image, or an SQL statement that
  # can be used to retrieve it, if it is stored in the database. In the latter
  # case, the "SELECT" and "FROM" clauses should be in uppercase in order to
  # be autodetected. If nil is returned, the media type will be inferred from
  # the extension in the identifier (if present).
  #
  # @return [String, nil]
  #
  def jdbcresolver_media_type
  end

  ##
  # @return [String] SQL statement that selects the BLOB corresponding to the
  #                  value returned by 'jdbcresolver_database_identifier()'.
  #
  def jdbcresolver_lookup_sql
  end

  ##
  # @return [Hash<String,Object>,nil] Hash containing 'bucket' and 'key' keys;
  #                                   or nil if not found.
  #
  def s3resolver_object_info
  end

  ##
  # Tells the server what overlay, if any, to apply to an image in response
  # to a request. Will be called upon all image requests to any endpoint if
  # overlays are enabled and the overlay strategy is set to `ScriptStrategy`
  # in the application configuration.
  #
  # N.B.: When a string overlay is too large or long to fit entirely within
  # the image, it won't be drawn. Consider breaking long strings with LFs (\n).
  #
  # @return [Hash<String,String>,nil] For image overlays, a hash with 'image',
  #         'position', and 'inset' keys. For string overlays, a hash with
  #         'background_color', 'color', 'font', 'font_min_size', 'font_size',
  #         'font_weight', 'glyph_spacing','inset', 'position', 'string',
  #         'stroke_color', and 'stroke_width' keys.
  #         Return nil for no overlay.
  #
  def overlay
  end

  ##
  # Tells the server what regions of an image to redact in response to a
  # particular request. Will be called upon all image requests to any endpoint
  # if redactions are enabled in the application configuration.
  #
  # @return [Array<Hash<String,Integer>>] Array of hashes, each with 'x', 'y',
  #         'width', and 'height' keys; or an empty array if no redactions are
  #         to be applied.
  #
  def redactions
    []
  end

end
